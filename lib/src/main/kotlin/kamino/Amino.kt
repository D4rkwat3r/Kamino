/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package kamino

import io.ktor.client.statement.*
import kamino.internal.AminoHeaders
import kamino.internal.AminoRequests
import kamino.internal.model.*
import kamino.internal.model.request.CreateFanClubRequest
import kamino.internal.model.request.LoginRequest
import kamino.internal.model.request.PaymentRequest
import kamino.internal.model.response.*
import kotlinx.serialization.decodeFromString
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.JsonObject
import java.util.UUID

class Amino(
    private val email: String? = null,
    private val phoneNumber: String? = null,
    private val password: String? = null,
    private val secret: String? = null
) {

    private val requests = AminoRequests()
    private val json: Json
    get() = requests.json
    var ndc: String = "g"
    set(value) { field = if (value.startsWith("x") || value == "g") value else "x$value" }
    var community: String
    get() = ndc
    set(value) { ndc = value }

    constructor(
        phoneCode: String, phoneNumber: String, password: String
    ): this(null, phoneCode + phoneNumber, password, null)

    constructor(
        email: String, password: String
    ): this(email, null, password, null)

    constructor(secret: String): this(null, null, null, secret)

    constructor(): this(null, null, null, null)

    private suspend fun login(
        email: String? = null,
        phoneNumber: String? = null,
        password: String? = null,
        secret: String? = null,
        deviceID: String? = null,
        action: String = "normal",
        clientType: Int = 100
    ): SessionInfo {
        val dev = deviceID ?: AminoHeaders.generateDeviceID()
        val data = LoginRequest(
            action,
            clientType,
            dev,
            if (password != null) "0 $password" else secret.toString()
        )
        if (email != null) data.email = email else if (phoneNumber != null) data.phoneNumber = phoneNumber
        val response = requests.postJson(
            "g/s/auth/login",
            data,
            dev
        )
        val decoded = json.decodeFromString<AuthResponse>(response.bodyAsText())
        val session = SessionInfo(
            decoded.secret ?: secret.toString(),
            decoded.sid,
            decoded.account,
            decoded.userProfile
        )
        requests.sessionInfo = session
        return session
    }

    suspend fun login(deviceID: String? = null): SessionInfo {
        return if (email != null && password != null) {
            loginByEmail(email, password, deviceID)
        } else if (phoneNumber != null && password != null)  {
            loginByPhoneNumber(phoneNumber, password, deviceID)
        } else if (secret != null) {
            loginBySecret(secret, deviceID)
        } else {
            throw IllegalArgumentException("Unable to automatically detect the login method, use loginByEmail, loginPyPhoneNumber or loginBySecret")
        }
    }

    suspend fun loginByEmail(email: String, password: String, deviceID: String? = null): SessionInfo {
        return login(email = email, password = password, deviceID = deviceID)
    }

    suspend fun loginByEmail(deviceID: String? = null): SessionInfo {
        require(
            email != null && password != null
        ) { "To use this function, you need to initialize the Amino object with the email and password arguments" }
        return loginByEmail(email, password, deviceID)
    }

    suspend fun loginByPhoneNumber(phoneNumber: String, password: String, deviceID: String? = null): SessionInfo {
        return login(phoneNumber = phoneNumber, password = password, deviceID = deviceID)
    }

    suspend fun loginByPhoneNumber(deviceID: String? = null): SessionInfo {
        require(
            phoneNumber != null && password != null
        ) { "To use this function, you need to initialize the Amino object with the phone code, phone number and password arguments" }
        return loginByPhoneNumber(phoneNumber, password, deviceID)
    }

    suspend fun loginBySecret(secret: String, deviceID: String? = null): SessionInfo {
        return login(secret = secret, action = "auto", clientType = 200, deviceID = deviceID)
    }

    suspend fun loginBySecret(deviceID: String? = null): SessionInfo {
        require(secret != null) { "To use this function, you need to initialize the Amino object with the secret argument" }
        return loginBySecret(secret, deviceID)
    }

    suspend fun joinFanClub(userId: String, autoRenew: Boolean = false): List<FanClub> {
        val response = requests.postJson(
            "$ndc/s/influencer/$userId/subscribe",
            PaymentRequest(PaymentContext(UUID.randomUUID().toString(), autoRenew))
        )
        return json.decodeFromString<FanClubListResponse>(response.bodyAsText()).fanClubList
    }

    suspend fun leaveFanClub(userId: String) {
        requests.delete("$ndc/s/influencer/$userId/subscribe")
    }

    suspend fun linkInfo(link: String): LinkInfoV2 {
        val response = requests.get("g/s/link-resolution", "q" to link)
        return json.decodeFromString<LinkResolutionResponse>(response.bodyAsText()).linkInfoV2
    }

    suspend fun createFanClub(userId: String, monthlyFee: Int = 50): UserProfile {
        val response = requests.postJson("$ndc/s/influencer/$userId", CreateFanClubRequest(monthlyFee))
        return json.decodeFromString<UserProfileResponse>(response.bodyAsText()).userProfile
    }

    suspend fun deleteFanClub(userId: String) {
        requests.delete("$ndc/s/influencer/$userId")
    }

    suspend fun getCommunityInfo(communityId: String): Community {
        val response = requests.get("g/s-x$communityId/community/info", "withInfluencerList" to "1", "withTopicList" to "true")
        return json.decodeFromString<CommunityInfoResponse>(response.bodyAsText()).community
    }
}
